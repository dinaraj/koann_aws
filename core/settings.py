"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path

from decouple import config, Csv
from django.contrib.messages import constants as message_constants

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DJANGO_DEBUG', cast=bool, default=False)

ALLOWED_HOSTS = config('DJANGO_ALLOWED_HOSTS', cast=Csv(), default=[])

SITE_ID = 1

AUTH_USER_MODEL = 'users.User'

# Application definition

DJANGO_APPS = [
    'django.contrib.sites',  # required by allauth
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
]

THIRD_PARTY_APPS = [
    'allauth',
    'allauth.account',
]

LOCAL_APPS = [
    'common',
    'users',
    'jobs',
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('DATABASE_NAME'),
        'USER': config('DATABASE_USERNAME'),
        'PASSWORD': config('DATABASE_PASSWORD'),
        'HOST': config('DATABASE_HOST'),
        'PORT': config('DATABASE_PORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'fr'

TIME_ZONE = 'Indian/Reunion'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# S3 STORAGE (MEDIA)
AWS_STORAGE = config('AWS_STORAGE', default=False, cast=bool)
if AWS_STORAGE:
    STORAGES = {
        "default": {
            "BACKEND": "storages.backends.s3.S3Storage",
            "OPTIONS": {
                "access_key": config('AWS_ACCESS_KEY_ID', ''),
                "secret_key": config('AWS_SECRET_ACCESS_KEY', ''),
                "bucket_name": config('AWS_S3_BUCKET_NAME', ''),
                "region_name": config('AWS_S3_REGION_NAME', ''),
                "location": "media",  # Dossier pour les fichiers media
                "file_overwrite": False,
                "custom_domain": None,
                "addressing_style": "virtual",  # important
                "querystring_auth": False,  # no signature
            }
        },
        "staticfiles": {
            "BACKEND": "storages.backends.s3.S3StaticStorage",
            "OPTIONS": {
                "access_key": config('AWS_ACCESS_KEY_ID', ''),
                "secret_key": config('AWS_SECRET_ACCESS_KEY', ''),
                "bucket_name": config('AWS_S3_BUCKET_NAME', ''),
                "region_name": config('AWS_S3_REGION_NAME', ''),
                "location": "static",  # Dossier pour les fichiers static
                "file_overwrite": True,  # True pour les static (optimisation)
                "custom_domain": None,
                "addressing_style": "virtual",
                "querystring_auth": False,
            },
        },
    }

    AWS_S3_BASE_URL = f"https://{config('AWS_S3_BUCKET_NAME', '')}.s3.{config('AWS_S3_REGION_NAME', '')}.amazonaws.com/"
    MEDIA_URL = f"{AWS_S3_BASE_URL}media/"
    STATIC_URL = f"{AWS_S3_BASE_URL}static/"

else:
    # STORAGES = {
    #     "staticfiles": {
    #         "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    #     },
    # }
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

    STATIC_URL = '/static/'
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Messages
MESSAGE_TAGS = {
    message_constants.DEBUG: 'debug',
    message_constants.INFO: 'info',
    message_constants.SUCCESS: 'success',
    message_constants.WARNING: 'warning',
    message_constants.ERROR: 'danger',
}

# Email
APP_URL = config('APP_URL', default='https://koann_aws.re')
APP_NAME = config('APP_NAME', default="KOANN AWS")


AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
]

# ALLAUTH
ACCOUNT_AUTHENTICATION_METHODS = {'email'}
ACCOUNT_LOGIN_METHODS = {'email'}
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_LOGOUT_ON_GET = True
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 7
ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']
ACCOUNT_EMAIL_VERIFICATION = 'optional'
ACCOUNT_USER_MODEL_USERNAME_FIELD = 'email'
ACCOUNT_RATE_LIMITS = {'login_failed': "10/m/ip,5/5m/key"}  # https://docs.allauth.org/en/latest/account/rate_limits.html
ACCOUNT_MAX_EMAIL_ADDRESSES = 2
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = 'common:index'
ACCOUNT_FORMS = {
    'login': 'users.forms.AccountLoginForm',
    'signup': 'users.forms.AccountSignupForm',
}
LOGOUT_REDIRECT_URL = 'common:index'
LOGIN_REDIRECT_URL = 'common:index'
LOGIN_URL = 'account_login'
